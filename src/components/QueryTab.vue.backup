<template>
  <div class="query-tab">
    <!-- Header Section -->
    <div class="page-header">
      <div class="header-content">
        <h2>🔍 Data Query & Export</h2>
        <p>Truy vấn dữ liệu tùy chỉnh với khả năng xuất Excel</p>
      </div>
      <div class="header-actions">
        <button class="btn btn-outline" @click="showTablesInfo" :disabled="!apiStore.isDatabaseConnected">
          📊 Tables Info
        </button>
        <button class="btn btn-outline" @click="showSampleQueries">
          📝 Sample Queries
        </button>
      </div>
    </div>

    <!-- Query Input Section -->
    <div class="query-section">
      <div class="section-header">
        <h3>📝 SQL Query</h3>
        <div class="query-actions">
          <button class="btn btn-small" @click="formatQuery" :disabled="!sqlQuery.trim()">
            ✨ Format
          </button>
          <button class="btn btn-small" @click="clearQuery" :disabled="!sqlQuery.trim()">
            🗑️ Clear
          </button>
        </div>
      </div>
      
      <div class="query-input-container">
        <textarea 
          v-model="sqlQuery"
          rows="12"
          class="sql-textarea"
          :class="{ 'has-content': sqlQuery.trim() }"
          placeholder="Nhập câu SQL SELECT của bạn...

Ví dụ:
SELECT TOP 100 * FROM PURTC WHERE TC030 = '1'

SELECT t1.TC001, t1.TC002, t2.TD004 
FROM PURTC t1 
LEFT JOIN PURTD t2 ON t1.TC001 = t2.TD001 AND t1.TC002 = t2.TD002 
WHERE t1.TC030 = '1'
ORDER BY t1.TC001, t1.TC002"
        ></textarea>
        
        <div v-if="sqlQuery.trim()" class="query-footer">
          <div class="query-info">
            <span class="info-item">📏 {{ sqlQuery.length }} characters</span>
            <span class="info-item">📄 {{ sqlQuery.split('\n').length }} lines</span>
            <span v-if="queryValidation.isValid" class="info-item valid">✅ Valid SELECT</span>
            <span v-if="!queryValidation.isValid && queryValidation.error" class="info-item invalid">❌ {{ queryValidation.error }}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Query Controls -->
    <div class="controls-section">
      <div class="controls-card">
        <div class="controls-header">
          <h3>🚀 Execute Query</h3>
          <div class="limit-control">
            <label for="rowLimit">Row Limit:</label>
            <select id="rowLimit" v-model="rowLimit">
              <option value="100">100 rows</option>
              <option value="500">500 rows</option>
              <option value="1000">1,000 rows</option>
              <option value="5000">5,000 rows</option>
            </select>
          </div>
        </div>
        
        <div class="controls-actions">
          <button 
            class="btn btn-primary btn-large"
            @click="executeQuery"
            :disabled="!canExecuteQuery"
            :class="{ 'btn-loading': isExecuting }"
          >
            <span v-if="isExecuting" class="loading-icon">🔄</span>
            <span v-else>🔍</span>
            {{ isExecuting ? 'Executing...' : 'Execute Query' }}
          </button>
          
          <button 
            class="btn btn-success btn-large"
            @click="exportToExcel"
            :disabled="!canExport"
            :class="{ 'btn-loading': isExporting }"
          >
            <span v-if="isExporting" class="loading-icon">🔄</span>
            <span v-else>📊</span>
            {{ isExporting ? 'Exporting...' : 'Export to Excel' }}
          </button>
        </div>
        
        <div class="status-checks">
          <div class="check-item" :class="{ valid: apiStore.isDatabaseConnected }">
            <span class="check-icon">{{ apiStore.isDatabaseConnected ? '✅' : '❌' }}</span>
            <span class="check-text">Database Connected</span>
          </div>
          <div class="check-item" :class="{ valid: queryValidation.isValid }">
            <span class="check-icon">{{ queryValidation.isValid ? '✅' : '❌' }}</span>
            <span class="check-text">Valid SQL Query</span>
          </div>
          <div class="check-item" :class="{ valid: queryResults.length > 0 }">
            <span class="check-icon">{{ queryResults.length > 0 ? '✅' : '❌' }}</span>
            <span class="check-text">Has Results ({{ queryResults.length }} rows)</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Results Section -->
    <div v-if="queryResults.length > 0 || executionInfo" class="results-section">
      <div class="results-header">
        <h3>📊 Query Results</h3>
        <div class="results-stats" v-if="executionInfo">
          <span class="stat-item">📄 {{ queryResults.length }} rows</span>
          <span class="stat-item">📋 {{ queryColumns.length }} columns</span>
          <span class="stat-item">⏱️ {{ executionInfo.executionTime }}ms</span>
        </div>
      </div>
      
      <div class="table-container">
        <div class="table-wrapper">
          <table class="results-table">
            <thead>
              <tr>
                <th v-for="column in queryColumns" :key="column" class="table-header">
                  {{ column }}
                </th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(row, index) in queryResults" :key="index" class="table-row">
                <td v-for="column in queryColumns" :key="column" class="table-cell">
                  {{ formatCellValue(row[column]) }}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <div v-if="queryResults.length >= rowLimit" class="table-footer">
          <div class="limit-warning">
            ⚠️ Results limited to {{ rowLimit }} rows. Use Export to Excel for complete dataset.
          </div>
        </div>
      </div>
    </div>

    <!-- Tables Info Modal -->
    <div v-if="showTablesModal" class="modal-overlay" @click="closeTablesModal">
      <div class="modal-content tables-modal" @click.stop>
        <div class="modal-header">
          <h3>📊 Database Tables & Columns</h3>
          <button class="close-btn" @click="closeTablesModal">&times;</button>
        </div>
        <div class="modal-body">
          <div v-if="loadingTables" class="loading-state">
            <div class="loading-spinner"></div>
            <p>Loading tables information...</p>
          </div>
          <div v-else class="tables-grid">
            <div v-for="table in tablesInfo" :key="table.table_name" class="table-card">
              <div class="table-header">
                <h4>{{ table.table_name }}</h4>
                <span class="row-count">{{ formatNumber(table.row_count) }} rows</span>
              </div>
              <div class="columns-list">
                <div 
                  v-for="column in getTableColumns(table.table_name)" 
                  :key="column.column_name"
                  class="column-item"
                  @click="insertColumnReference(table.table_name, column.column_name)"
                >
                  <span class="column-name">{{ column.column_name }}</span>
                  <span class="column-type">{{ column.data_type }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sample Queries Modal -->
    <div v-if="showSamplesModal" class="modal-overlay" @click="closeSamplesModal">
      <div class="modal-content samples-modal" @click.stop>
        <div class="modal-header">
          <h3>📝 Sample Queries</h3>
          <button class="close-btn" @click="closeSamplesModal">&times;</button>
        </div>
        <div class="modal-body">
          <div class="samples-grid">
            <div v-for="sample in sampleQueries" :key="sample.title" class="sample-card">
              <div class="sample-header">
                <h4>{{ sample.title }}</h4>
                <button class="btn btn-small" @click="useSampleQuery(sample.sql)">
                  📋 Use Query
                </button>
              </div>
              <p class="sample-description">{{ sample.description }}</p>
              <pre class="sample-sql">{{ sample.sql }}</pre>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Result Messages -->
    <div v-if="resultMessage" class="result-message" :class="resultMessage.type">
      <div class="message-icon">
        {{ resultMessage.type === 'success' ? '✅' : resultMessage.type === 'error' ? '❌' : 'ℹ️' }}
      </div>
      <div class="message-content">{{ resultMessage.text }}</div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, watch } from 'vue'
import { useApiStore } from '@/stores/api.js'

const apiStore = useApiStore()

// State
const sqlQuery = ref('')
const rowLimit = ref(100)
const queryResults = ref([])
const queryColumns = ref([])
const executionInfo = ref(null)
const isExecuting = ref(false)
const isExporting = ref(false)
const resultMessage = ref(null)

// Tables info modal
const showTablesModal = ref(false)
const loadingTables = ref(false)
const tablesInfo = ref([])
const columnsInfo = ref([])

// Sample queries modal
const showSamplesModal = ref(false)

// Computed
const queryValidation = computed(() => {
  if (!sqlQuery.value.trim()) {
    return { isValid: false, error: 'Query is required' }
  }
  
  const trimmed = sqlQuery.value.trim().toUpperCase()
  if (!trimmed.startsWith('SELECT')) {
    return { isValid: false, error: 'Only SELECT statements allowed' }
  }
  
  // Basic dangerous keywords check
  const dangerous = ['DROP', 'DELETE', 'UPDATE', 'INSERT', 'ALTER', 'TRUNCATE', 'EXEC']
  if (dangerous.some(keyword => trimmed.includes(keyword))) {
    return { isValid: false, error: 'Dangerous keywords detected' }
  }
  
  return { isValid: true, error: null }
})

const canExecuteQuery = computed(() => 
  apiStore.isDatabaseConnected && 
  queryValidation.value.isValid && 
  !isExecuting.value
)

const canExport = computed(() => 
  canExecuteQuery.value && 
  queryResults.value.length > 0 && 
  !isExporting.value
)

// Sample queries
const sampleQueries = [
  {
    title: "Basic Table Query",
    description: "Simple SELECT with filtering",
    sql: "SELECT TOP 100 * FROM PURTC WHERE TC030 = '1' ORDER BY TC001, TC002"
  },
  {
    title: "Join Tables",
    description: "JOIN two related tables",
    sql: `SELECT 
  t1.TC001, t1.TC002, t1.TC030,
  t2.TD004, t2.TD005, t2.TD008
FROM PURTC t1 
LEFT JOIN PURTD t2 ON t1.TC001 = t2.TD001 AND t1.TC002 = t2.TD002 
WHERE t1.TC030 = '1'
ORDER BY t1.TC001, t1.TC002`
  },
  {
    title: "Aggregation Query",
    description: "GROUP BY with COUNT/SUM",
    sql: `SELECT 
  TC030 as Status,
  COUNT(*) as Count,
  COUNT(DISTINCT TC001) as UniqueTC001
FROM PURTC 
GROUP BY TC030
ORDER BY TC030`
  },
  {
    title: "Date Range Query",
    description: "Filter by date range",
    sql: `SELECT TOP 200 *
FROM PURTC 
WHERE TC003 >= '2024-01-01' 
  AND TC003 <= '2024-12-31'
ORDER BY TC003 DESC`
  }
]

// Methods
const executeQuery = async () => {
  if (!canExecuteQuery.value) return
  
  isExecuting.value = true
  resultMessage.value = null
  
  try {
    const response = await apiStore.executeCustomQuery({
      sql: sqlQuery.value,
      limit: parseInt(rowLimit.value)
    })
    
    if (response.success) {
      queryResults.value = response.data.data || []
      queryColumns.value = response.data.columns || []
      executionInfo.value = {
        executionTime: response.data.executionTime,
        rowCount: response.data.rowCount,
        query: response.data.query
      }
      
      resultMessage.value = {
        type: 'success',
        text: `Query executed successfully! Retrieved ${queryResults.value.length} rows in ${response.data.executionTime}ms`
      }
    } else {
      queryResults.value = []
      queryColumns.value = []
      executionInfo.value = null
      resultMessage.value = {
        type: 'error',
        text: response.message
      }
    }
  } catch (error) {
    queryResults.value = []
    queryColumns.value = []
    executionInfo.value = null
    resultMessage.value = {
      type: 'error',
      text: `Query failed: ${error.message}`
    }
  } finally {
    isExecuting.value = false
    
    // Clear message after 5 seconds
    setTimeout(() => {
      resultMessage.value = null
    }, 5000)
  }
}

const exportToExcel = async () => {
  if (!canExport.value) return
  
  isExporting.value = true
  resultMessage.value = null
  
  try {
    const filename = `query_results_${new Date().toISOString().slice(0, 19).replace(/[:]/g, '-')}`
    
    const response = await apiStore.exportQueryToExcel({
      sql: sqlQuery.value,
      filename: filename
    })
    
    resultMessage.value = {
      type: 'success',
      text: `Excel file exported successfully! File: ${filename}.xlsx`
    }
  } catch (error) {
    resultMessage.value = {
      type: 'error',
      text: `Export failed: ${error.message}`
    }
  } finally {
    isExporting.value = false
    
    setTimeout(() => {
      resultMessage.value = null
    }, 5000)
  }
}

const showTablesInfo = async () => {
  showTablesModal.value = true
  loadingTables.value = true
  
  try {
    const response = await apiStore.getTablesInfo()
    if (response.success) {
      tablesInfo.value = response.data.tables || []
      columnsInfo.value = response.data.columns || []
    }
  } catch (error) {
    console.error('Failed to load tables info:', error)
  } finally {
    loadingTables.value = false
  }
}

const closeTablesModal = () => {
  showTablesModal.value = false
}

const getTableColumns = (tableName) => {
  return columnsInfo.value.filter(col => col.table_name === tableName)
}

const insertColumnReference = (tableName, columnName) => {
  const insertion = `${tableName}.${columnName}`
  const textarea = document.querySelector('.sql-textarea')
  if (textarea) {
    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const text = sqlQuery.value
    sqlQuery.value = text.substring(0, start) + insertion + text.substring(end)
    
    // Set cursor position after insertion
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + insertion.length
      textarea.focus()
    }, 0)
  }
}

const showSampleQueries = () => {
  showSamplesModal.value = true
}

const closeSamplesModal = () => {
  showSamplesModal.value = false
}

const useSampleQuery = (sql) => {
  sqlQuery.value = sql
  closeSamplesModal()
}

const formatQuery = () => {
  // Basic SQL formatting
  let formatted = sqlQuery.value
    .replace(/\s+/g, ' ')
    .replace(/SELECT/gi, 'SELECT')
    .replace(/FROM/gi, '\nFROM')
    .replace(/WHERE/gi, '\nWHERE')
    .replace(/ORDER BY/gi, '\nORDER BY')
    .replace(/GROUP BY/gi, '\nGROUP BY')
    .replace(/LEFT JOIN/gi, '\nLEFT JOIN')
    .replace(/INNER JOIN/gi, '\nINNER JOIN')
    .replace(/AND/gi, '\n  AND')
    .replace(/OR/gi, '\n  OR')
  
  sqlQuery.value = formatted.trim()
}

const clearQuery = () => {
  sqlQuery.value = ''
  queryResults.value = []
  queryColumns.value = []
  executionInfo.value = null
  resultMessage.value = null
}

const formatCellValue = (value) => {
  if (value === null || value === undefined) return ''
  if (typeof value === 'string' && value.length > 100) {
    return value.substring(0, 100) + '...'
  }
  return value
}

const formatNumber = (num) => {
  if (!num) return '0'
  return new Intl.NumberFormat().format(num)
}
</script>

<style scoped>
.query-tab {
  max-width: 1400px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

/* Page Header */
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 8px;
}

.header-content h2 {
  margin: 0 0 8px 0;
  font-size: 1.875rem;
  font-weight: 700;
  color: #1f2937;
}

.header-content p {
  margin: 0;
  font-size: 1rem;
  color: #6b7280;
}

.header-actions {
  display: flex;
  gap: 12px;
}

/* Query Section */
.query-section {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  border: 1px solid #e5e7eb;
  overflow: hidden;
}

.section-header {
  background: linear-gradient(135deg, #f8fafc 0%, #e5e7eb 100%);
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.section-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 700;
  color: #1f2937;
}

.query-actions {
  display: flex;
  gap: 8px;
}

.query-input-container {
  padding: 24px;
}

.sql-textarea {
  width: 100%;
  min-height: 300px;
  padding: 16px;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-family: 'Courier New', monospace;
  font-size: 0.875rem;
  line-height: 1.5;
  resize: vertical;
  background: #fafafa;
  transition: all 0.2s ease;
}

.sql-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  background: white;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.sql-textarea.has-content {
  background: white;
}

.query-footer {
  margin-top: 12px;
  padding: 8px 12px;
  background: #f9fafb;
  border-radius: 6px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.query-info {
  display: flex;
  gap: 16px;
  font-size: 0.8rem;
}

.info-item {
  color: #6b7280;
}

.info-item.valid {
  color: #10b981;
  font-weight: 600;
}

.info-item.invalid {
  color: #ef4444;
  font-weight: 600;
}

/* Controls Section */
.controls-section {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  border: 1px solid #e5e7eb;
  overflow: hidden;
}

.controls-card {
  padding: 24px;
}

.controls-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.controls-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 700;
  color: #1f2937;
}

.limit-control {
  display: flex;
  align-items: center;
  gap: 8px;
}

.limit-control label {
  font-size: 0.875rem;
  color: #6b7280;
  font-weight: 500;
}

.limit-control select {
  padding: 6px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.875rem;
}

.controls-actions {
  display: flex;
  gap: 16px;
  margin-bottom: 20px;
}

.btn-large {
  padding: 12px 24px;
  font-size: 1rem;
  font-weight: 600;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: all 0.2s ease;
  flex: 1;
  justify-content: center;
}

.btn-primary {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  color: white;
  border: none;
}

.btn-success {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  border: none;
}

.btn-loading {
  opacity: 0.7;
  cursor: not-allowed;
}

.loading-icon {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.status-checks {
  display: flex;
  gap: 16px;
  justify-content: center;
  flex-wrap: wrap;
}

.check-item {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  background: #f9fafb;
  border-radius: 6px;
  font-size: 0.8rem;
}

.check-item.valid {
  background: #ecfdf5;
  color: #065f46;
}

/* Results Section */
.results-section {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  border: 1px solid #e5e7eb;
  overflow: hidden;
}

.results-header {
  background: linear-gradient(135deg, #f8fafc 0%, #e5e7eb 100%);
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.results-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 700;
  color: #1f2937;
}

.results-stats {
  display: flex;
  gap: 16px;
}

.stat-item {
  font-size: 0.8rem;
  color: #6b7280;
  background: rgba(59, 130, 246, 0.1);
  padding: 4px 8px;
  border-radius: 4px;
}

.table-container {
  padding: 24px;
}

.table-wrapper {
  overflow-x: auto;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
}

.results-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.875rem;
}

.table-header {
  background: #f9fafb;
  padding: 12px 8px;
  text-align: left;
  font-weight: 600;
  color: #1f2937;
  border-bottom: 1px solid #e5e7eb;
  border-right: 1px solid #e5e7eb;
  white-space: nowrap;
}

.table-row:nth-child(even) {
  background: #f9fafb;
}

.table-cell {
  padding: 8px;
  border-bottom: 1px solid #e5e7eb;
  border-right: 1px solid #e5e7eb;
  max-width: 200px;
  word-break: break-word;
}

.table-footer {
  margin-top: 12px;
  text-align: center;
}

.limit-warning {
  background: #fef3cd;
  border: 1px solid #fde68a;
  color: #92400e;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 0.875rem;
}

/* Modals */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  border-radius: 16px;
  max-width: 90vw;
  max-height: 90vh;
  overflow: hidden;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
}

.tables-modal {
  width: 1000px;
}

.samples-modal {
  width: 800px;
}

.modal-header {
  background: linear-gradient(135deg, #f8fafc 0%, #e5e7eb 100%);
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 700;
  color: #1f2937;
}

.close-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #6b7280;
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
}

.close-btn:hover {
  background: #f3f4f6;
  color: #1f2937;
}

.modal-body {
  padding: 24px;
  overflow-y: auto;
  max-height: calc(90vh - 200px);
}

.loading-state {
  text-align: center;
  padding: 40px;
}

.loading-spinner {
  width: 32px;
  height: 32px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 16px;
}

.tables-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 16px;
}

.table-card {
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  overflow: hidden;
}

.table-header {
  background: #f9fafb;
  padding: 12px 16px;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.table-header h4 {
  margin: 0;
  font-size: 1rem;
  font-weight: 600;
  color: #1f2937;
}

.row-count {
  font-size: 0.75rem;
  color: #6b7280;
  background: #e5e7eb;
  padding: 2px 6px;
  border-radius: 4px;
}

.columns-list {
  max-height: 200px;
  overflow-y: auto;
}

.column-item {
  padding: 8px 16px;
  border-bottom: 1px solid #f3f4f6;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: background-color 0.2s ease;
}

.column-item:hover {
  background: #f3f4f6;
}

.column-name {
  font-weight: 500;
  color: #1f2937;
  font-family: monospace;
}

.column-type {
  font-size: 0.75rem;
  color: #6b7280;
  background: #f3f4f6;
  padding: 2px 6px;
  border-radius: 3px;
}

.samples-grid {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.sample-card {
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 16px;
}

.sample-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
}

.sample-header h4 {
  margin: 0;
  font-size: 1rem;
  font-weight: 600;
  color: #1f2937;
}

.sample-description {
  margin: 0 0 12px 0;
  color: #6b7280;
  font-size: 0.875rem;
}

.sample-sql {
  background: #1f2937;
  color: #e5e7eb;
  padding: 12px;
  border-radius: 6px;
  font-size: 0.8rem;
  line-height: 1.4;
  overflow-x: auto;
  margin: 0;
  white-space: pre-wrap;
}

/* Result Message */
.result-message {
  position: fixed;
  top: 20px;
  right: 20px;
  max-width: 400px;
  padding: 16px;
  border-radius: 8px;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  z-index: 1001;
  display: flex;
  align-items: flex-start;
  gap: 12px;
}

.result-message.success {
  background: #ecfdf5;
  border: 1px solid #a7f3d0;
  color: #065f46;
}

.result-message.error {
  background: #fef2f2;
  border: 1px solid #fecaca;
  color: #991b1b;
}

.result-message.info {
  background: #eff6ff;
  border: 1px solid #93c5fd;
  color: #1e40af;
}

.message-icon {
  font-size: 1.25rem;
  flex-shrink: 0;
}

.message-content {
  font-size: 0.875rem;
  line-height: 1.4;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border: 1px solid;
  border-radius: 6px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
  background: white;
}

.btn-outline {
  border-color: #d1d5db;
  color: #6b7280;
}

.btn-outline:hover:not(:disabled) {
  border-color: #3b82f6;
  color: #3b82f6;
  background: #eff6ff;
}

.btn-small {
  padding: 4px 8px;
  font-size: 0.8rem;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .controls-actions {
    flex-direction: column;
  }
  
  .page-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .header-actions {
    justify-content: flex-end;
  }
}

@media (max-width: 768px) {
  .query-tab {
    gap: 16px;
  }
  
  .section-header, .controls-card, .query-input-container, .table-container {
    padding: 16px;
  }
  
  .section-header {
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
  }
  
  .query-actions {
    justify-content: flex-end;
  }
  
  .controls-header {
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
  }
  
  .status-checks {
    flex-direction: column;
  }
  
  .results-header {
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
  }
  
  .results-stats {
    justify-content: center;
  }
  
  .sql-textarea {
    min-height: 200px;
    font-size: 0.8rem;
  }
  
  .modal-content {
    margin: 20px;
    max-width: calc(100vw - 40px);
  }
  
  .tables-grid {
    grid-template-columns: 1fr;
  }
  
  .result-message {
    position: static;
    margin-bottom: 16px;
  }
}

@media (max-width: 480px) {
  .query-input-container {
    padding: 12px;
  }
  
  .sql-textarea {
    padding: 12px;
    font-size: 0.75rem;
  }
  
  .btn-large {
    padding: 10px 16px;
    font-size: 0.9rem;
  }
  
  .results-stats {
    flex-direction: column;
    gap: 8px;
  }
  
  .table-cell, .table-header {
    padding: 6px 4px;
    font-size: 0.8rem;
  }
}
</style>